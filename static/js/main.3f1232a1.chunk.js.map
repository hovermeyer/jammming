{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","util/Spotify.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","React","Component","constructor","props","super","this","state","search","bind","handleTermChange","keyPress","onSearch","term","e","targetSearch","target","value","setState","keyCode","render","className","onChange","onKeyDown","placeholder","onClick","Track","addTrack","removeTrack","renderAction","isRemoval","onAdd","track","onRemove","convertTime","Date","duration","toISOString","slice","name","artist","album","TrackList","tracks","map","key","id","link","defaultProps","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","accessToken","Spotify","currentLocation","window","location","href","match","expiration","setTimeout","history","pushState","fetch","headers","Authorization","getAccessToken","then","response","json","jsonResponse","items","artists","URI","uri","duration_ms","searchTerm","length","userID","playlistID","header","ok","Error","networkError","console","log","message","method","body","JSON","stringify","uris","App","updatePlaylistName","savePlaylist","recommendations","find","savedTrack","push","tempArray","filter","trackURIs","seedTracks","join","searchTerms","recommedations","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f1232a1.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./SearchBar.css\"\r\n\r\n//Purpose: provide input location\r\nclass SearchBar extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {};\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.keyPress = this.keyPress.bind(this);\r\n  }\r\n\r\n//Purpose: call search\r\n  search(){\r\n    this.props.onSearch(this.state.term)\r\n  }\r\n//Purpose: set search term based on change event passed\r\n  handleTermChange(e){\r\n    let targetSearch = e.target.value;\r\n    this.setState({term: targetSearch});\r\n  }\r\n\r\n\r\n//Purpose:  allow pressing enter to search\r\n  keyPress(e){\r\n    if(e.keyCode === 13){\r\n      this.search();\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n    <div className=\"SearchBar\">\r\n      <input onChange = {this.handleTermChange}  onKeyDown={this.keyPress} placeholder=\"Enter A Song, Album, or Artist\" />\r\n      <a onClick ={this.search} >SEARCH</a>\r\n    </div>)\r\n  }\r\n\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\"\r\nimport \"./Track.css\"\r\n\r\n\r\n//Purpose: display a specific track\r\nclass Track extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.addTrack= this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n//Purpose: check if add or remove, perform action accordingly\r\n  renderAction(){\r\n    if (this.props.isRemoval){\r\n      return <a onClick ={this.removeTrack} className=\"Track-action\">-</a>\r\n    }else{\r\n      return <a onClick ={this.addTrack} className=\"Track-action\">+</a>\r\n    }\r\n  }\r\n//Purpose: add a new track\r\n  addTrack(){\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n//Purpose: remove a track\r\n  removeTrack(){\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n//Purpose show the duration given in ms as minutes and seconds\r\n  convertTime(){\r\n    var d = new Date(this.props.track.duration);\r\n    return ( d.toISOString().slice(14,-5)); // \"4:59\"\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album} | {this.convertTime()}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Track;\r\n","import React from \"react\"\r\nimport Track from \"../Track/Track.js\"\r\nimport \"./TrackList.css\"\r\n\r\n\r\nclass TrackList extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className=\"TrackList\">\r\n      {\r\n        this.props.tracks.map(track =>{\r\n       return <Track\r\n          onAdd={this.props.onAdd}\r\n          track={track}\r\n          key={track.id}\r\n          duration ={track.duration}\r\n          link = {track.link}\r\n          onRemove= {this.props.onRemove}\r\n          isRemoval = {this.props.isRemoval} /> })\r\n     }\r\n      </div>)\r\n  }\r\n\r\n}\r\n\r\n//set a default blank list of tracks to ensure can use map if necessary\r\nTrackList.defaultProps = {tracks: []};\r\n\r\nexport default TrackList;\r\n","import React from \"react\"\r\nimport TrackList from \"../TrackList/TrackList.js\"\r\nimport \"./SearchResults.css\"\r\n\r\n//Purpose: display search results \r\nclass SearchResults extends React.Component{\r\n  render(){\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n          <TrackList isRemoval={false} onAdd={this.props.onAdd} tracks={this.props.searchResults} />\r\n      </div>)\r\n  }\r\n\r\n}\r\nexport default SearchResults;\r\n","import React from \"react\";\r\nimport TrackList from \"../TrackList/TrackList.js\"\r\nimport \"./Playlist.css\"\r\n\r\n//Purpose: display a playlist with functionality to save it to Spotify\r\nclass Playlist extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n//Purpose: change the name of the playlist\r\n  handleNameChange(e){\r\n    const name = e.target.value;\r\n    this.props.onNameChange(name);\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n    <div className=\"Playlist\">\r\n      <input onChange = {this.handleNameChange} value={this.props.playlistName} />\r\n        <TrackList onRemove = {this.props.onRemove} isRemoval = {true} tracks={this.props.playlistTracks} />\r\n      <a onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</a>\r\n      <a onClick={this.props.onSearch} className=\"Playlist-search\">SEARCH RELATED</a>\r\n\r\n    </div>)\r\n  }\r\n}\r\n\r\n\r\nexport default Playlist;\r\n","const clientID =\"e7089f671bcf466cadac8945320843cb\";\r\nconst uriRedirect =\"https://hovermeyer.github.io/jammming/\"\r\n//const uriRedirect =\"http://localhost:3000/\"\r\n\r\nlet accessToken ='';\r\n\r\nlet Spotify= {};\r\n//Purpose: get the authorization using Implicit Grant to be able to interact with the spotify api\r\nSpotify.getAccessToken= () =>{\r\n  let currentLocation = window.location.href;\r\n  if(accessToken){\r\n    return accessToken;\r\n  }else if(currentLocation.match(/access_token=([^&]*)/) && currentLocation.match(/expires_in=([^&]*)/)) {\r\n    //userAccess not set yet, will need to get it\r\n    let expiration = currentLocation.match(/expires_in=([^&]*)/)[1];\r\n    accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\r\n    window.setTimeout(() => accessToken = '', expiration * 1000);\r\n    window.history.pushState('Access Token', null, '/');\r\n    return accessToken;\r\n  }else{\r\n      //token && expiration do not exist, send user to get authorization\r\n    window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${uriRedirect}`\r\n  }\r\n}\r\n\r\n//Purpose: use Spotify API to get a list of tracks to display\r\nSpotify.search=(term)=>{\r\n  return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n     {headers:{Authorization:`Bearer ${Spotify.getAccessToken()}`}}).then(\r\n       response =>{\r\n           return  response.json();\r\n       }\r\n     ).then(\r\n       jsonResponse =>{\r\n         if (jsonResponse.tracks){          \r\n           return jsonResponse.tracks.items.map(track => {\r\n             return {\r\n               id: track.id,\r\n               artist: track.artists[0].name,\r\n               album: track.album.name,\r\n               name: track.name,\r\n               URI: track.uri, \r\n               duration: track.duration_ms,\r\n               link: track.href\r\n             }\r\n           })\r\n         }\r\n\r\n       }\r\n     )\r\n\r\n}\r\n\r\n//Purpose: use Spotify API to get recommendations based on current playlist (first 5 only)\r\nSpotify.recommedations=(searchTerm)=>{\r\n  return fetch(`https://api.spotify.com/v1/recommendations?${searchTerm}`,\r\n     {headers:{Authorization:`Bearer ${Spotify.getAccessToken()}`}}).then(\r\n       response =>{\r\n           return  response.json();\r\n       }\r\n     ).then(\r\n       jsonResponse =>{\r\n         if (jsonResponse.tracks){\r\n           return jsonResponse.tracks.map(track => {\r\n             return {\r\n               id: track.id,\r\n               artist: track.artists[0].name,\r\n               album: track.album.name,\r\n               name: track.name,\r\n               URI: track.uri, \r\n               duration: track.duration_ms,\r\n               link:track.href\r\n             }\r\n           })\r\n         }\r\n\r\n       }\r\n     )\r\n\r\n}\r\n\r\n//Purpose: save a playlist on spotify with playlistName and tracks\r\nSpotify.savePlaylist = (playlistName, tracks)=>{\r\n  if (!playlistName || !tracks.length){\r\n    return\r\n  }else{\r\n    let header =    { Authorization: `Bearer ${accessToken}` };\r\n    let userID;\r\n    let playlistID;\r\n    //fetch the user id\r\n    fetch(`https://api.spotify.com/v1/me`,\r\n       {headers:header}).then(\r\n         response =>{\r\n           if(response.ok){\r\n             return  response.json();\r\n           }\r\n           throw new Error( \"Network Error\")\r\n         },   networkError =>{\r\n           console.log(networkError.message);\r\n      }\r\n       ).then(\r\n\r\n         jsonResponse =>{\r\n           if (jsonResponse.id){\r\n             userID = jsonResponse.id\r\n             }\r\n           }\r\n         ).then(\r\n           jsonResponse =>{\r\n\r\n // user the userId and authorization to create the new playlist\r\n return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\r\n    {method: 'POST', headers:header, body :JSON.stringify({name:playlistName})}).then(\r\n      response =>{\r\n        if(response.ok){\r\n          return  response.json();\r\n        }\r\n        throw new Error (\"Network Error\");\r\n      })\r\n    }, networkError =>{\r\n      console.log(networkError.message);\r\n    }\r\n    ).then(\r\n\r\n      jsonResponse =>{\r\n        if (jsonResponse.id){\r\n          playlistID = jsonResponse.id\r\n          }\r\n        }\r\n      ).then(\r\n        jsonResponse =>{\r\n          //Add tracks to the playlist\r\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,\r\n         {method: 'POST', headers:header, body:JSON.stringify({uris:tracks})}).then(\r\n           response =>{\r\n               return  response.json();\r\n           })\r\n         }\r\n         )\r\n   }\r\n}\r\n\r\nexport default Spotify;\r\n","import React from \"react\"\r\nimport SearchBar from \"../SearchBar/SearchBar.js\"\r\nimport SearchResults from \"../SearchResults/SearchResults.js\"\r\nimport Playlist from \"../Playlist/Playlist.js\"\r\nimport Spotify from \"../../util/Spotify.js\"\r\nimport \"./App.css\"\r\n\r\n\r\n//Purpose: search Spotify for tracks and create playlists from these tracks.\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {searchResults :[],\r\n    playlistName: \"My Playlist Name Test\",\r\n    playlistTracks : []}\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack =this.removeTrack.bind(this);\r\n    this.updatePlaylistName= this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this.recommendations = this.recommendations.bind(this);\r\n  }\r\n\r\n//Purpose: add a track to the playlist\r\n  addTrack(track){\r\n   //Confirm track is not already on the playlist\r\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\r\n     return;\r\n    }\r\n   //push track to the playlistTracks\r\n    this.state.playlistTracks.push(track);\r\n    this.setState({playlistTracks: this.state.playlistTracks})\r\n  }\r\n\r\n//Purpose: change the name of the playlist\r\n updatePlaylistName(name){\r\n   this.setState({\r\n     playlistName:name\r\n   })\r\n }\r\n\r\n//Purpose:  remove a track from the playlist\r\n removeTrack(track){\r\n  let tempArray= this.state.playlistTracks.filter(savedTrack =>  savedTrack.id !== track.id)\r\n   this.setState(\r\n     {playlistTracks: tempArray})\r\n }\r\n\r\n//Purpose: save the playlist\r\n savePlaylist(){\r\n   let trackURIs = this.state.playlistTracks.map(track => {return track.URI})\r\n   Spotify.savePlaylist(this.state.playlistName, trackURIs)\r\n }\r\n\r\n\r\n//Purpose: search for tracks to display as search results\r\n search(searchTerm){\r\n   Spotify.search(searchTerm).then(searchResults =>{this.setState({searchResults:searchResults})});\r\n }\r\n\r\n\r\n //Purpose: allow to search based on tracks added to the playlist\r\n recommendations(){\r\n  let seedTracks = this.state.playlistTracks.map(track=>{return track.id}).slice(0,5).join(',')\r\n  let searchTerms =(`seed_tracks=${seedTracks}`)\r\n\r\n  Spotify.recommedations(searchTerms).then(searchResults =>{this.setState({searchResults:searchResults})});\r\n }\r\n\r\n render(){\r\n  return (<div>\r\n    <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n    <div className=\"App\">\r\n      <SearchBar onSearch = {this.search}/>\r\n      <div className=\"App-playlist\">\r\n        <SearchResults onAdd = {this.addTrack} searchResults = {this.state.searchResults} />\r\n        <Playlist onNameChange= {this.updatePlaylistName}\r\n                  onRemove = {this.removeTrack}\r\n                  onSave ={this.savePlaylist}\r\n                  onSearch ={this.recommendations}\r\n                  playlistName={this.state.playlistName}\r\n                  playlistTracks = {this.state.playlistTracks} />\r\n      </div>\r\n    </div>\r\n  </div>)\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}