{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/PlaylistView/PlaylistView.js","components/PlaylistList/PlaylistList.js","util/Spotify.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","React","Component","constructor","props","super","handleSearchChange","event","newValue","this","setState","durationRange","state","search","bind","advancedSearch","handleTermChange","keyPress","onSearch","term","e","targetSearch","target","value","keyCode","onAdvancedSearch","renderAdvanced","advancedSearchVisible","Button","onClick","Slider","onChange","valueLabelDisplay","aria-labelledby","render","className","onKeyDown","placeholder","ButtonGroup","size","variant","color","aria-label","Track","addTrack","removeTrack","renderAction","isRemoval","onAdd","track","onRemove","convertTime","Date","duration","toISOString","slice","name","artist","album","TrackList","tracks","map","key","id","link","defaultProps","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","PlaylistView","loadPlaylist","playlist","totalTracks","PlaylistList","playlists","accessToken","Spotify","currentLocation","window","location","href","match","expiration","setTimeout","history","pushState","fetch","headers","Authorization","getAccessToken","then","response","json","jsonResponse","items","artists","URI","uri","duration_ms","total","console","log","item","searchTerm","length","userID","playlistID","header","ok","Error","networkError","message","method","body","JSON","stringify","uris","App","getPlaylists","updatePlaylistName","savePlaylist","recommendations","find","savedTrack","push","tempArray","filter","trackURIs","newVisible","playlistInfo","seedTracks","join","searchTerms","recommedations","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6909ce8.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./SearchBar.css\"\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\n\r\n//Purpose: provide input location\r\nclass SearchBar extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {durationRange:[0,10000]};\r\n    this.search = this.search.bind(this);\r\n    this.advancedSearch = this.advancedSearch.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleSearchChange = this.handleSearchChange.bind(this);\r\n    this.keyPress = this.keyPress.bind(this);\r\n  }\r\n\r\n//Purpose: call search\r\n  search(){\r\n    this.props.onSearch(this.state.term)\r\n  }\r\n//Purpose: set search term based on change event passed\r\n  handleTermChange(e){\r\n    let targetSearch = e.target.value;\r\n    this.setState({term: targetSearch});\r\n  }\r\n\r\n//Purpose:  allow pressing enter to search\r\n  keyPress(e){\r\n    if(e.keyCode === 13){\r\n      this.search();\r\n    }\r\n  }\r\n\r\n  handleSearchChange = (event, newValue) => {\r\n    this.setState({durationRange:newValue});\r\n  };\r\n\r\n  //Purpose: allow advanced search options to be visible\r\n  advancedSearch(){\r\n    this.props.onAdvancedSearch();\r\n  }\r\n\r\n  //Purpose: display either advanced search options, or basic search options\r\n  renderAdvanced(){\r\n    if (this.props.advancedSearchVisible){\r\n      return (<div>\r\n        <Button onClick ={this.advancedSearch} > Regular Search</Button>\r\n\r\n        <Slider\r\n        value={this.state.durationRange}\r\n        onChange={this.handleSearchChange}\r\n        valueLabelDisplay=\"auto\"\r\n        aria-labelledby=\"range-slider\"\r\n        //getAriaValueText={valuetext}\r\n        />\r\n      </div>)\r\n    }else{\r\n      return  <Button onClick ={this.advancedSearch} > More Options</Button>\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n    <div className=\"SearchBar\">\r\n      <input onChange = {this.handleTermChange}  onKeyDown={this.keyPress} placeholder=\"Enter A Song, Album, or Artist\" />\r\n      <ButtonGroup size=\"large\" variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n\r\n        <Button onClick ={this.search} >Search</Button>\r\n      </ButtonGroup>\r\n\r\n    </div>)\r\n  }\r\n\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\"\r\nimport \"./Track.css\"\r\n\r\n\r\n//Purpose: display a specific track\r\nclass Track extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.addTrack= this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n//Purpose: check if add or remove, perform action accordingly\r\n  renderAction(){\r\n    if (this.props.isRemoval){\r\n      return <a onClick ={this.removeTrack} className=\"Track-action\">-</a>\r\n    }else{\r\n      return <a onClick ={this.addTrack} className=\"Track-action\">+</a>\r\n    }\r\n  }\r\n//Purpose: add a new track\r\n  addTrack(){\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n//Purpose: remove a track\r\n  removeTrack(){\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n//Purpose show the duration given in ms as minutes and seconds\r\n  convertTime(){\r\n    var d = new Date(this.props.track.duration);\r\n    return ( d.toISOString().slice(14,-5)); // \"4:59\"\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album} | {this.convertTime()}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Track;\r\n","import React from \"react\"\r\nimport Track from \"../Track/Track.js\"\r\nimport \"./TrackList.css\"\r\n\r\n\r\nclass TrackList extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className=\"TrackList\">\r\n      {\r\n        this.props.tracks.map(track =>{\r\n       return <Track\r\n          onAdd={this.props.onAdd}\r\n          track={track}\r\n          key={track.id}\r\n          duration ={track.duration}\r\n          link = {track.link}\r\n          onRemove= {this.props.onRemove}\r\n          isRemoval = {this.props.isRemoval} /> })\r\n     }\r\n      </div>)\r\n  }\r\n\r\n}\r\n\r\n//set a default blank list of tracks to ensure can use map if necessary\r\nTrackList.defaultProps = {tracks: []};\r\n\r\nexport default TrackList;\r\n","import React from \"react\"\r\nimport TrackList from \"../TrackList/TrackList.js\"\r\nimport \"./SearchResults.css\"\r\n\r\n//Purpose: display search results \r\nclass SearchResults extends React.Component{\r\n  render(){\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n          <TrackList isRemoval={false} onAdd={this.props.onAdd} tracks={this.props.searchResults} />\r\n      </div>)\r\n  }\r\n\r\n}\r\nexport default SearchResults;\r\n","import React from \"react\";\r\nimport TrackList from \"../TrackList/TrackList.js\"\r\nimport \"./Playlist.css\"\r\n\r\n//Purpose: display a playlist with functionality to save it to Spotify\r\nclass Playlist extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n//Purpose: change the name of the playlist\r\n  handleNameChange(e){\r\n    const name = e.target.value;\r\n    this.props.onNameChange(name);\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n    <div className=\"Playlist\">\r\n      <input onChange = {this.handleNameChange} value={this.props.playlistName} />\r\n        <TrackList onRemove = {this.props.onRemove} isRemoval = {true} tracks={this.props.playlistTracks} />\r\n      <a onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</a>\r\n      <a onClick={this.props.onSearch} className=\"Playlist-search\">SEARCH RELATED</a>\r\n\r\n    </div>)\r\n  }\r\n}\r\n\r\n\r\nexport default Playlist;\r\n","import React from \"react\"\r\nimport \"./PlaylistView.css\"\r\n\r\n\r\n//Purpose: display a specific track\r\nclass PlaylistView extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.loadPlaylist= this.loadPlaylist.bind(this);\r\n  }\r\n\r\n//Purpose: add a new track\r\n  loadPlaylist(){\r\n    this.props.loadPlaylist(this.props.playlist);\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"Playlist\">\r\n        <div className=\"Playlist-information\">\r\n          <h3>{this.props.playlist.name}</h3>\r\n          <p>{this.props.playlist.totalTracks} Tracks</p>\r\n        </div>\r\n        <a onClick={this.loadPlaylist} className=\"Playlist-action\">Load</a>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default PlaylistView;\r\n","import React from \"react\";\r\nimport PlaylistView from \"../PlaylistView/PlaylistView.js\"\r\nimport \"./PlaylistList.css\"\r\n\r\n//Purpose: displays the users playlists\r\nclass PlaylistList extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n\r\n\r\n\r\n  render(){\r\n    return(\r\n    <div className=\"PlaylistList\">\r\n      <h2>My Playlists</h2>\r\n      {this.props.playlists.map((playlist)=>{\r\n        return <PlaylistView className=\"Playlist\"\r\n                              playlist={playlist}\r\n                              key = {playlist.id}\r\n                              loadPlaylist ={this.props.loadPlaylist} />\r\n\r\n      })}\r\n\r\n    </div>)\r\n  }\r\n}\r\nPlaylistList.defaultProps = {playlists: []};\r\n\r\n\r\nexport default PlaylistList;\r\n\r\n/*     \r\n*/","const clientID =\"e7089f671bcf466cadac8945320843cb\";\r\nconst uriRedirect =\"https://hovermeyer.github.io/jammming/\"\r\n//const uriRedirect =\"http://localhost:3000/\"\r\n\r\nlet accessToken ='';\r\n\r\nlet Spotify= {};\r\n//Purpose: get the authorization using Implicit Grant to be able to interact with the spotify api\r\nSpotify.getAccessToken= () =>{\r\n  let currentLocation = window.location.href;\r\n  if(accessToken){\r\n    return accessToken;\r\n  }else if(currentLocation.match(/access_token=([^&]*)/) && currentLocation.match(/expires_in=([^&]*)/)) {\r\n    //userAccess not set yet, will need to get it\r\n    let expiration = currentLocation.match(/expires_in=([^&]*)/)[1];\r\n    accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\r\n    window.setTimeout(() => accessToken = '', expiration * 1000);\r\n    window.history.pushState('Access Token', null, '/');\r\n    return accessToken;\r\n  }else{\r\n      //token && expiration do not exist, send user to get authorization\r\n    window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${uriRedirect}`\r\n  }\r\n}\r\n\r\n//Purpose: use Spotify API to get a list of tracks to display\r\nSpotify.search=(term)=>{\r\n  return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n     {headers:{Authorization:`Bearer ${Spotify.getAccessToken()}`}}).then(\r\n       response =>{\r\n           return  response.json();\r\n       }\r\n     ).then(\r\n       jsonResponse =>{\r\n         if (jsonResponse.tracks){          \r\n           return jsonResponse.tracks.items.map(track => {\r\n             return {\r\n               id: track.id,\r\n               artist: track.artists[0].name,\r\n               album: track.album.name,\r\n               name: track.name,\r\n               URI: track.uri, \r\n               duration: track.duration_ms,\r\n               link: track.href\r\n             }\r\n           })\r\n         }\r\n\r\n       }\r\n     )\r\n\r\n}\r\n\r\n\r\n//Purpose: use Spotify API to get user's playlist\r\nSpotify.getPlaylists=()=>{\r\n  return fetch(`https://api.spotify.com/v1/me/playlists`,\r\n     {headers:{Authorization:`Bearer ${Spotify.getAccessToken()}`}}).then(\r\n       response =>{\r\n           return  response.json();\r\n       }\r\n     ).then(\r\n       jsonResponse =>{\r\n         if (jsonResponse.items){\r\n           return jsonResponse.items.map(playlist => {\r\n             return {\r\n               id: playlist.id,\r\n               name: playlist.name,\r\n               totalTracks: playlist.tracks.total,\r\n               URI: playlist.uri, \r\n             }\r\n           })\r\n         }\r\n\r\n       }\r\n     )\r\n\r\n}\r\n\r\n\r\n//Purpose: use Spotify API to get tracks from a specific playlist\r\nSpotify.loadPlaylist=(playlist)=>{\r\n  return fetch(` https://api.spotify.com/v1/playlists/${playlist}`,\r\n     {headers:{Authorization:`Bearer ${Spotify.getAccessToken()}`}}).then(\r\n       response =>{\r\n           return  response.json();\r\n       }\r\n     ).then(\r\n       jsonResponse =>{\r\n         console.log(jsonResponse)\r\n         if (jsonResponse.tracks){\r\n           return jsonResponse.tracks.items.map(item => {\r\n             return {\r\n              id: item.track.id,\r\n              artist: item.track.artists[0].name,\r\n              album: item.track.album.name,\r\n              name: item.track.name,\r\n              URI: item.track.uri, \r\n              duration: item.track.duration_ms,\r\n              link: item.track.href\r\n             }\r\n           })\r\n         }\r\n\r\n       }\r\n     )\r\n\r\n}\r\n\r\n//Purpose: use Spotify API to get recommendations based on current playlist (first 5 only)\r\nSpotify.recommedations=(searchTerm)=>{\r\n  return fetch(`https://api.spotify.com/v1/recommendations?${searchTerm}`,\r\n     {headers:{Authorization:`Bearer ${Spotify.getAccessToken()}`}}).then(\r\n       response =>{\r\n           return  response.json();\r\n       }\r\n     ).then(\r\n       jsonResponse =>{\r\n         if (jsonResponse.tracks){\r\n           return jsonResponse.tracks.map(track => {\r\n             return {\r\n               id: track.id,\r\n               artist: track.artists[0].name,\r\n               album: track.album.name,\r\n               name: track.name,\r\n               URI: track.uri, \r\n               duration: track.duration_ms,\r\n               link:track.href\r\n             }\r\n           })\r\n         }\r\n\r\n       }\r\n     )\r\n\r\n}\r\n\r\n//Purpose: save a playlist on spotify with playlistName and tracks\r\nSpotify.savePlaylist = (playlistName, tracks)=>{\r\n  if (!playlistName || !tracks.length){\r\n    return\r\n  }else{\r\n    let header =    { Authorization: `Bearer ${accessToken}` };\r\n    let userID;\r\n    let playlistID;\r\n    //fetch the user id\r\n    fetch(`https://api.spotify.com/v1/me`,\r\n       {headers:header}).then(\r\n         response =>{\r\n           if(response.ok){\r\n             return  response.json();\r\n           }\r\n           throw new Error( \"Network Error\")\r\n         },   networkError =>{\r\n           console.log(networkError.message);\r\n      }\r\n       ).then(\r\n\r\n         jsonResponse =>{\r\n           if (jsonResponse.id){\r\n             userID = jsonResponse.id\r\n             }\r\n           }\r\n         ).then(\r\n           jsonResponse =>{\r\n\r\n // user the userId and authorization to create the new playlist\r\n return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\r\n    {method: 'POST', headers:header, body :JSON.stringify({name:playlistName})}).then(\r\n      response =>{\r\n        if(response.ok){\r\n          return  response.json();\r\n        }\r\n        throw new Error (\"Network Error\");\r\n      })\r\n    }, networkError =>{\r\n      console.log(networkError.message);\r\n    }\r\n    ).then(\r\n\r\n      jsonResponse =>{\r\n        if (jsonResponse.id){\r\n          playlistID = jsonResponse.id\r\n          }\r\n        }\r\n      ).then(\r\n        jsonResponse =>{\r\n          //Add tracks to the playlist\r\n      return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,\r\n         {method: 'POST', headers:header, body:JSON.stringify({uris:tracks})}).then(\r\n           response =>{\r\n               return  response.json();\r\n           })\r\n         }\r\n         )\r\n   }\r\n}\r\n\r\nexport default Spotify;\r\n","import React from \"react\"\r\nimport SearchBar from \"../SearchBar/SearchBar.js\"\r\nimport SearchResults from \"../SearchResults/SearchResults.js\"\r\nimport Playlist from \"../Playlist/Playlist.js\"\r\nimport PlaylistList from \"../PlaylistList/PlaylistList.js\"\r\n\r\n\r\nimport Spotify from \"../../util/Spotify.js\"\r\nimport \"./App.css\"\r\n\r\n\r\n//Purpose: search Spotify for tracks and create playlists from these tracks.\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {searchResults :[],\r\n    playlistName: \"My Playlist Name Test\",\r\n    playlistTracks : [],\r\n    playlists:this.getPlaylists(),\r\n    advancedSearchVisible:false}\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack =this.removeTrack.bind(this);\r\n    this.updatePlaylistName= this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this.recommendations = this.recommendations.bind(this);\r\n    this.advancedSearch = this.advancedSearch.bind(this);\r\n    this.getPlaylists = this.getPlaylists.bind(this);\r\n    this.loadPlaylist = this.loadPlaylist.bind(this)\r\n  }\r\n\r\n//Purpose: add a track to the playlist\r\n  addTrack(track){\r\n   //Confirm track is not already on the playlist\r\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\r\n     return;\r\n    }\r\n   //push track to the playlistTracks\r\n    this.state.playlistTracks.push(track);\r\n    this.setState({playlistTracks: this.state.playlistTracks})\r\n  }\r\n\r\n//Purpose: change the name of the playlist\r\n updatePlaylistName(name){\r\n   this.setState({\r\n     playlistName:name\r\n   })\r\n }\r\n\r\n//Purpose:  remove a track from the playlist\r\n removeTrack(track){\r\n  let tempArray= this.state.playlistTracks.filter(savedTrack =>  savedTrack.id !== track.id)\r\n   this.setState(\r\n     {playlistTracks: tempArray})\r\n }\r\n\r\n//Purpose: save the playlist\r\n savePlaylist(){\r\n   let trackURIs = this.state.playlistTracks.map(track => {return track.URI})\r\n   Spotify.savePlaylist(this.state.playlistName, trackURIs)\r\n   //I probably want to load them here after save to spotify\r\n }\r\n\r\n\r\n//Purpose: search for tracks to display as search results\r\n search(searchTerm){\r\n   Spotify.search(searchTerm).then(searchResults =>{this.setState({searchResults:searchResults})});\r\n }\r\n\r\n //Purpose: show advanced search options or not\r\n advancedSearch(){\r\n   let newVisible = !(this.state.advancedSearchVisible);\r\n   this.setState({advancedSearchVisible:newVisible});\r\n }\r\n\r\n getPlaylists(){\r\n   Spotify.getPlaylists().then(playlists=>{this.setState({playlists:playlists})});\r\n }\r\n\r\n loadPlaylist(playlistInfo){\r\n  Spotify.loadPlaylist(playlistInfo.id).then(playlist=>{\r\n    this.setState({playlistTracks: playlist, playlistName: playlistInfo.name})})\r\n  \r\n\r\n }\r\n\r\n //Purpose: allow to search based on tracks added to the playlist\r\n recommendations(){\r\n  let seedTracks = this.state.playlistTracks.map(track=>{return track.id}).slice(0,5).join(',')\r\n  let searchTerms =(`seed_tracks=${seedTracks}`)\r\n\r\n  Spotify.recommedations(searchTerms).then(searchResults =>{this.setState({searchResults:searchResults})});\r\n }\r\n\r\n render(){\r\n  return (<div>\r\n    <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n    <div className=\"App\">\r\n      <SearchBar onSearch = {this.search} \r\n                 onAdvancedSearch = {this.advancedSearch}\r\n                 advancedSearchVisible ={this.state.advancedSearchVisible}/>\r\n      <div className=\"App-playlist\">\r\n        <PlaylistList playlists = {this.state.playlists}  \r\n                      loadPlaylist = {this.loadPlaylist}/>\r\n\r\n        <SearchResults onAdd = {this.addTrack} searchResults = {this.state.searchResults} />\r\n        <Playlist onNameChange= {this.updatePlaylistName}\r\n                  onRemove = {this.removeTrack}\r\n                  onSave ={this.savePlaylist}\r\n                  onSearch ={this.recommendations}\r\n                  playlistName={this.state.playlistName}\r\n                  playlistTracks = {this.state.playlistTracks} \r\n                  />\r\n\r\n      </div>\r\n      <div className=\"App-playlist\">\r\n\r\n      </div>\r\n    </div>\r\n  </div>)\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}